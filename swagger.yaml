openapi: 3.0.3
info:
  title: Cosmos Swagger
  description: |-
    This is a list of all APIs available in the Cosmos backend
  termsOfService: http://swagger.io/terms/
  contact:
    email: cosmos.social.time@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.1-beta001
servers:
  - url: https://cosmos-social.cyclic.app/api
tags:
  - name: admin
    description: All APIs related to admin
  - name: auth
    description: All APIs related to authentication
  - name: company
    description: All APIs related to companies
  - name: dashboard
    description: All APIs related to dashboard
  - name: mentorship
    description: All APIs related to mentorships
  - name: program
    description: All APIs related to programs
  - name: socialOrganization
    description: All APIs related to social organizations 
  - name: user
    description: All APIs related to regular users
  - name: volunteer
    description: All APIs related to volunteers

paths:
  # ADMIN
  /admin/user/{userId}:
    get:
      tags:
        - admin
      summary: Get user info
      description: Allows ADMINS to get all user secure data
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: number
            example: 1
      responses:
        '200':
          description: Get successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    allOf:
                      - $ref: '#/components/schemas/UserSecureData'
                      - type: object
                        properties:
                          company:
                            $ref: '#/components/schemas/Company'
        '400':
          description: User not found
        '500':
          description: Internal server error
      security:
        - bearer_token: []
  /admin/company:
    post:
      tags:
        - admin
      summary: Create a company
      description: Allow admin users to create a company
      operationId: createCompany
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              required:
                - code
                - name
              properties:
                code:
                  type: string
                  example: 012345
                  description: Unique identifier for the company
                name:
                  type: string
                  example: 'Itau'
        required: true
      responses:
        '201':
          description: Company created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: "Company ID"
                    example: 1
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
      security:
        - bearer_token: []
  /admin/modifyUserRole:
    patch:
      tags:
        - admin
      summary: Changes user role
      description: Allows ADMINS to change another user role
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                  example: 1
                role:
                  type: string
                  enum:
                    - admin
                    - user
        required: true
      responses:
        '200':
          description: Role updated successfully
        '400':
          description: User not found
        '500':
          description: Internal server error
      security:
        - bearer_token: []

  # AUTH
  /auth/signup:
    post:
      tags:
        - auth
      summary: Creates a new user account
      description: Creates a new user and send an email to the user with a confirmation link
      operationId: updatePet
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              required:
                - byname
                - fullName
                - email
                - password
                - passwordConfirmation
              properties:
                byname:
                  type: string
                  example: João
                fullName:
                  type: string
                  example: João da Silva Fernandes
                email:
                  type: string
                  format: "email"
                password:
                  type: string
                  format: "password"
                  example: "SenhaForte1!"
                passwordConfirmation:
                  type: string
                  format: "password"
                  example: "SenhaForte1!"
        required: true
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: "User ID"
                    example: 1
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
  /auth/signin:
    post:
      tags:
        - "auth"
      summary: "Authenticates the user"
      description: "Authenticate the user returning a bearer token & a refresh token"
      operationId: "signIn"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: "email"
                password:
                  type: string
                  format: "password"
                  example: "SenhaForte1!"
        required: true
      responses:
        '200':
          description: User authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    description: "Bearer Token"
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNjgxOTQ5ODE1LCJleHAiOjE2ODE5NTM0MTV9.m3lkgvjS3e8MqZjUlG-Mplku4VAze1vPNFSJkX5CFiQ"
                  refreshToken:
                    type: string
                    description: "Bearer Token"
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNjgxOTQ5ODE1LCJleHAiOjE2ODE5NTM0MTV9.m3lkgvjS3e8MqZjUlG-Mplku4VAze1vPNFSJkX5CFiQ"
        '401':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
  /auth/refreshToken:
    post:
      tags:
        - "auth"
      summary: "Refresh users access token"
      description: "Validate refresh token returning a new bearer token & a new refresh token"
      operationId: "refreshToken"
      parameters:
        - in: header
          name: RefreshToken
          schema:
            type: string
          required: true
      responses:
        '200':
          description: User authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    description: "Bearer Token"
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNjgxOTQ5ODE1LCJleHAiOjE2ODE5NTM0MTV9.m3lkgvjS3e8MqZjUlG-Mplku4VAze1vPNFSJkX5CFiQ"
                  refreshToken:
                    type: string
                    description: "Bearer Token"
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNjgxOTQ5ODE1LCJleHAiOjE2ODE5NTM0MTV9.m3lkgvjS3e8MqZjUlG-Mplku4VAze1vPNFSJkX5CFiQ"
        '401':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
  /auth/verify:
    patch:
      tags:
        - auth
      summary: Confirm user account
      description: Confirms that user clicked in the confirmation link recieved on the email
      operationId: verifyuserAccount
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - token
              properties:
                email:
                  type: string
                  format: "email"
                token:
                  type: string
                  example: "f5f69931faba6b8e3258d0b1c4027fa1e725cf2f87ac1b1f539e2442b5793a12"
        required: true
      responses:
        '200':
          description: User verified successfully
        '403':
          description: Token is invalid
  /auth/resendVerification:
    post:
      tags:
        - auth
      summary: Resend verification email
      operationId: resendVerification
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
        required: true
      responses:
        '200':
          description: Email sent successfully
        '204':
          description: User is already verified
        '400':
          description: Email not registered
        '500':
          description: Internal server error
  /auth/resetPassword:
    patch:
      tags:
        - auth
      summary: Change user password
      operationId: resetPassword
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - token
              properties:
                email:
                  type: string
                  format: "email"
                password:
                  type: string
                  format: password
                  example: "SenhaForte1!"
                token:
                  type: string
                  example: "f5f69931faba6b8e3258d0b1c4027fa1e725cf2f87ac1b1f539e2442b5793a12"
        required: true
      responses:
        '200':
          description: Password updated successfully
        '400':
          description: Email not registered
        '403':
          description: Token invalid
        '500':
          description: Internal server error
  /auth/forgotPassword:
    post:
      tags:
        - auth
      summary: Send a forgot password email to user
      operationId: forgotPassword
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
        required: true
      responses:
        '200':
          description: Email sent successfully
        '400':
          description: User not registered
        '500':
          description: Internal server error

  # DASHBOARD
  /dashboard:
    get:
      tags:
        - dashboard
      summary: Returns user dashboard info
      description: Returns user dashboard info based on type of user (ex. Admin, Volunteer, ONG Director, etc.)
      responses:
        '200':
          description: Operation successfull
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/VolunteerDashboard'
      security:
        - bearer_token: []

  # MENTORSHIP
  /mentorship/{mentorshipId}/calendar:
    get:
      tags:
        - mentorship
      summary: List calendar for mentorship
      parameters:
        - in: path
          name: mentorshipId
          schema:
            type: number
            example: 1
          required: true
        - in: query
          name: START_DATE
          schema:
            type: string
            format: date
            example: 2023-05-18
        - in: query
          name: END_DATE
          schema:
            type: string
            format: date
            example: 2023-05-18
      responses:
        '200':
          description: Successfully retrieved mentorship calendar
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: number
                          example: 1
                        title:
                          type: string
                          example: 'Reunião para discutir próximos passos'
                        description:
                          type: string
                          example: |-
                            Nessa reunião serão discutidos os seguintes pontos:
                              - Regras de negócio
                              - Jurídico
                              - Porque o dev demorou pra fazer o swagger
                        link:
                          type: string
                          format: url
                          example: https://meet.google.com/xxx-yyy-zzz
                        eventAt:
                          type: string
                          example: '2023-06-01T03:00:00.000Z'
                        createdAt:
                          type: string
                          example: '2024-05-01T03:00:00.000Z'
                        updatedAt:
                          type: string
                          example: '2023-05-01T03:00:00.000Z'
                        attendees:
                          type: array
                          items:
                            $ref: '#/components/schemas/MentorshipEventAttendee'
      security:
        - bearer_token: []
  /mentorship/{mentorshipId}/event:
    post:
      tags:
        - mentorship
      summary: Create a new goal to a mentorship
      operationId: "createEvent"
      parameters:
        - in: path
          name: mentorshipId
          schema:
            type: number
            example: 1
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Metas da próxima semana"
                description:
                  type: string
                  example: "Nessa reunião definiremos as metas da próxima semana, além de discutirmos os pontos positivos e negativos da semana que passou"
                link:
                  type: string
                  format: url
                  example: "https://meet.google.com/xxx-yyy-zzz"
                eventAt:
                  type: string
                  format: 'date-time'
                  example: '2023-05-28T12:00:00:000Z'
                attendees:
                  type: array
                  description: 'Array containing the userId from all attendees'
                  minItems: 1
                  items:
                    type: object
                    properties:
                      id:
                        type: number
                        example: 1
              required:
                - title
                - description
                - link
                - eventAt
                - attendees
      responses:
        '200':
          description: Goal created successfuly
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: number
                    example: 1
      security:
        - bearer_token: []
  /mentorship/{mentorshipId}/goals:
    get:
      tags:
        - mentorship
      summary: List goals for mentorship
      operationId: "listGoals"
      parameters:
        - in: path
          name: mentorshipId
          schema:
            type: number
            example: 1
          required: true
      responses:
        '200':
          description: Successfully retrieved mentorship goals
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: number
                          example: 1
                        name:
                          type: string
                          example: 'Objetivos 1'
                        createdAt:
                          type: string
                          example: '2024-05-01T03:00:00.000Z'
                        updatedAt:
                          type: string
                          example: '2023-05-01T03:00:00.000Z'
                        tasks:
                          type: array
                          items:
                            $ref: '#/components/schemas/MentorshipGoalTask'
      security:
        - bearer_token: []
    post:
      tags:
        - mentorship
      summary: Create a new goal to a mentorship
      operationId: "createGoal"
      parameters:
        - in: path
          name: mentorshipId
          schema:
            type: number
            example: 1
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        '200':
          description: Goal created successfuly
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: number
                    example: 1
      security:
        - bearer_token: []
  /mentorship/{mentorshipId}/volunteers:
    get:
      tags:
        - mentorship
      summary: List goals for mentorship
      parameters:
        - in: path
          name: mentorshipId
          schema:
            type: number
            example: 1
          required: true
      responses:
        '200':
          description: Successfully retrieved mentorship goals
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: number
                          description: Volunteer ID
                          example: 1
                        userId:
                          type: number
                          description: User ID
                          example: 1
                        byname:
                          type: string
                          example: 'João'
                        profilePicture:
                          type: string
                          format: url
                          example: null
                          description: User profile picture pre-signed URL with expiration
                        banner:
                          type: string
                          format: url
                          example: null
                          description: User banner pre-signed URL with expiration
                        professionalPreviousExperiences:
                          type: string
                          example: |-
                            Lorem ipsum dolor sit amet, consectetur adipiscing elit.
                            Aliquam tempor massa diam, et fringilla enim sollicitudin ac.
                            Aliquam at lectus facilisis, varius nisl semper, dapibus massa
                        mainCompetencies:
                          type: string
                          example: "Sou ótimo com números"
                        reasonToJoin:
                          type: string
                          example: "Sou caridoso"
                        previousMentorship:
                          type: string
                          example: "Nunca fiz nada antes"
                        roleId:
                          type: number
                          example: 1
                          description: Volunteer Role ID
                        role:
                          type: string
                          example: "specialist"
                        knowledgeAreas:
                          type: array
                          items:
                            $ref: '#/components/schemas/KnowledgeAreas'
      security:
        - bearer_token: []
  /mentorship/goal/{goalId}/task:
    post:
      tags:
        - mentorship
      summary: "Creates a new task to a mentorship goal"
      operationId: "createTask"
      parameters:
        - in: path
          name: goalId
          schema:
            type: number
            example: 1
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Escrever relatório financeiro"
              required:
                - name
      responses:
        '200':
          description: 'Task created successfully'
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: number
                    example: 1
      security:
        - bearer_token: []
  /mentorship/task/{taskId}/completed:
    patch:
      tags:
        - mentorship
      summary: 'Changes the "complete" status of a task'
      description: 'This API uses the current user to mark as the task completer'
      parameters:
        - in: path
          name: taskId
          schema:
            type: number
            example: 1
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                completed:
                  type: boolean
                  example: true
      responses:
        '200':
          description: 'Completion status changed successfully'
      security:
        - bearer_token: []
  /mentorship/event/{eventId}:
    delete:
      tags:
        - mentorship
      summary: 'Deletes a specific event'
      operationId: 'eventDelete'
      parameters:
        - in: path
          name: eventId
          schema:
            type: number
            example: 1
          required: true
      responses:
        '200':
          description: 'Event successfully deleted'
      security:
        - bearer_token: []
  /mentorship/goal/{goalId}:
    delete:
      tags:
        - mentorship
      summary: 'Deletes a specific goal'
      operationId: 'goalDelete'
      parameters:
        - in: path
          name: goalId
          schema:
            type: number
            example: 1
          required: true
      responses:
        '200':
          description: 'Event successfully deleted'
      security:
        - bearer_token: []
  /mentorship/task/{taskId}:
    delete:
      tags:
        - mentorship
      summary: 'Deletes a specific task'
      operationId: 'taskDelete'
      parameters:
        - in: path
          name: taskId
          schema:
            type: number
            example: 1
          required: true
      responses:
        '200':
          description: 'Event successfully deleted'
      security:
        - bearer_token: []
  
  # PROGRAM
  /program:
    get:
      tags:
        - program
      summary: Get all programs available for user company
      parameters:
        - in: query
          name: PAGE
          schema:
            type: integer
            minimum: 1
        - in: query
          name: PER_PAGE
          schema:
            type: integer
            maximum: 100
      responses:
        '200':
          description: Successfully retrieved program
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: number
                      example: 1
                    name:
                      type: string
                      example: 'Programa social 1'
                    description:
                      type: string
                      example: 'Programa de teste'
                    startDate:
                      type: string
                      example: '2023-05-01T03:00:00.000Z'
                    endDate:
                      type: string
                      example: '2024-05-01T03:00:00.000Z'
                    createdAt:
                      type: string
                      example: '2023-05-01T03:00:00.000Z'
                    updatedAt:
                      type: string
                      example: '2023-05-01T03:00:00.000Z'
        '500':
          description: Internal server error
      security:
        - bearer_token: []
    post:
      tags:
        - program
      summary: Create new program
      description: Allows a company employee or an admin to create a new program 
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                companyId:
                  type: number
                  example: 1
                name:
                  type: string
                  example: 'Program de teste'
                description:
                  type: string
                  example: 'Program de teste description'
                startDate:
                  type: string
                  format: date
                  example: '2023-05-01'
                endDate:
                  type: string
                  format: date
                  example: '2024-05-01'
      responses:
        '201':
          description: 'Program created successfully'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    default: 'Program created'
                  id:
                    type: number
                    example: 1
      security:
        - bearer_token: []
  /{programId}/applications/socialOrganizations:
    get:
      tags:
        - program
      summary: 'List program social organization applications'
      description: 'Allow company employees and admins to see applicants'
      parameters:
        - in: path
          name: programId
          schema:
            type: number
            example: 1
          required: true
      responses:
        '200':
          description: 'List social organization applicants'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    applications:
                      $ref: '#/components/schemas/MentorshipApplication'
        '403':
          description: 'User not authorized to access program data'
        '500':
          description: 'Internal server error'
      security:
        - bearer_token: []
  /{programId}/applications/volunteers:
    get:
      tags:
        - program
      summary: 'List program volunteers applications'
      description: 'Allow company employees and admins to see applicants'
      parameters:
        - in: path
          name: programId
          schema:
            type: number
            example: 1
          required: true
      responses:
        '200':
          description: 'List program volunteers applications'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    applications:
                      $ref: '#/components/schemas/VolunteerApplication'
        '403':
          description: 'User not authorized to access program data'
        '500':
          description: 'Internal server error'
      security:
        - bearer_token: []
  
  # SOCIAL ORGANIZAION
  /socialOrganization/{socialOrganizationId}/sectors:
    get:
      tags:
        - socialOrganization
      summary: 'List the sectors of a social organization'
      operationId: 'listONGSectors'
      parameters:
        - in: path
          name: socialOrganizationId
          required: true
          schema:
            type: number
            example: 1
      responses:
        '200':
          description: 'List social organization sectors'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SocialOrganizationSectors'
      security:
        - bearer_token: []
    post:
      tags:
        - socialOrganization
      summary: 'Upsert the sectors of a social organization'
      operationId: 'upsertONGSectors'
      parameters:
        - in: path
          name: socialOrganizationId
          required: true
          schema:
            type: number
            example: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                sectorId:
                  type: number
                  example: 1
                ranking:
                  type: number
                  description: 'How the social organization sector is ranked from 0 to 5'
                  example: 5
                currentlyWorking:
                  type: string
                  description: "Field where it's described how this sector currently work in the social organization"
                  example: 'Nós fazemos um trabalho de marketing basedo nos passos x, y e z, onde o nosso responsável pelo setor gerencia 5 pessoas, etc.'
                effectiveness:
                  type: string
                  description: "Field where it's described how their effective is their effort"
                  example: 'Embora tenhamos uma grande taxa de conversão nos links das nossas redes sociais, temos pouco retorno nos links de doação e pouco compartilhamento'
      responses:
        '200':
          description: 'Successfully upsert sector'
      security:
        - bearer_token: []
  
  # USER
  /user:
    get:
      tags:
        - user
      summary: Get current user information
      description: Get current user information using authentication Token
      operationId: getUserInfo
      responses:
        '200':
          description: Successfully get user information
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    allOf:
                      - $ref: '#/components/schemas/UserSecureData'
                      - type: object
                        properties:
                          role:
                            $ref: '#/components/schemas/Role'
      security:
        - bearer_token: []
  /user/onboarding:
    patch:
      tags:
        - user
      summary: Patch user onboarding data
      description: Patch current user onboarding data
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                companyCode:
                  type: string
                  example: Itau
                birthdate:
                  type: string
                  format: date
                  example: '1990-01-01'
                gender:
                  type: string
                  example: Masculino
                country:
                  type: string
                  example: Brasil
                state:
                  type: string
                  example: São Paulo
                city:
                  type: string
                  example: Carapicuiba
        required: true
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    default: 'User updated successfully'
        '500':
          description: Internal server error
      security:
        - bearer_token: []
  /user/volunteering:
    patch:
      tags:
        - user
      summary: Patch user volunteering data
      description: Patch current user volunteering data
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                professionalExperience:
                  type: number
                  example: 10.6
                professionalSector:
                  type: string
                  example: 'IT'
                professionalRole:
                  type: string
                  example: 'Desenvolvedor de Software'
                availableTime:
                  type: number
                  example: 4
                linkedinUrl:
                  type: string
                  example: 'https://linkedin.com/in/joaodasilvafernandes1323'
                professionalPreviousExperiences:
                  type: string 
                  example: |-
                    Lorem ipsum dolor sit amet, consectetur adipiscing elit.
                    Aliquam tempor massa diam, et fringilla enim sollicitudin ac.
                    Aliquam at lectus facilisis, varius nisl semper, dapibus massa
                mainCompetencies:
                  type: string
                  example: 'Sou ótimo com números'
                reasonToJoin:
                  type: string
                  example: 'Sou caridoso'
                previousMentorship:
                  type: string
                  example: 'Nunca fiz nada assim antes'
                sectorIds:
                  description: 'Knowledge areas selected by the user'
                  type: array
                  example: 
                    - 1
                    - 2
                    - 3
                  items:
                    type: number
                    minimum: 3
                    maximum: 3
        required: true
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    default: 'User updated successfully'
        '400':
          description: Body validation error
        '500':
          description: Internal server error
      security:
        - bearer_token: []
  /user/picture/banner:
    patch:
      tags:
        - user
      summary: 'Uploads current user banner image'
      operationId: 'uploadBanner'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
                - file
      responses:
        '200':
          description: 'Imnage uploaded successfully'
      security:
        - bearer_token: []
  /user/picture/profile:
    patch:
      tags:
        - user
      summary: 'Uploads current user profile picture'
      operationId: 'uploadProfilePicture'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
                - file
      responses:
        '200':
          description: 'Imnage uploaded successfully'
      security:
        - bearer_token: []

  # VOLUNTEER
  /volunteer/apply:
    post:
      tags:
        - volunteer
      summary: Creates volunteer application for program
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                agreed:
                  type: boolean
                  description: Flag that informs if user agreed with terms
                agreedAt:
                  type: string
                  format: 'date-time'
                programId:
                  type: number
                  example: 1
                file:
                  type: string
                  format: binary
                  description: PDF file containing terms & conditions assigned by the user
        required: true
      responses:
        '201':
          description: Volunteer application created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    default: 'Application created'
                  id:
                    type: number
                    example: 1
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
      security:
        - bearer_token: []
  /volunteer/prefferedRoles:
    patch:
      tags:
        - volunteer
      summary: Update preferred voluntering roles
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                applicationId:
                  type: number
                  example: 1
                  enum:
                    - 1
                    - 2
                    - 3
                firstRole:
                  type: number
                  example: 1
                  enum:
                    - 1
                    - 2
                    - 3
                secondRole:
                  type: number
                  example: 2
                  enum:
                    - 1
                    - 2
                    - 3
                thirdRole:
                  type: number
                  example: 3
                  enum:
                    - 1
                    - 2
                    - 3
        required: true
      responses:
        '201':
          description: Preferred volunteer roles patched
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    default: 'Roles defined successfully'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error 
      security:
        - bearer_token: []   
  
components:
  schemas:
    Error:
      type: object
      properties:
        message:
          type: string
          description: 'Message describing the error'
    Company:
      type: object
      properties:
        id:
          type: number
          example: 1
        name:
          type: string
          example: 'Itau'
        code:
          type: string
          example: '123441'
        logo:
          $ref: '#/components/schemas/Storage'
    KnowledgeAreas:
      type: object
      properties:
        sectorId:
          type: number
          example: 2
        sector:
          type: string
          example: "leadership"
    MentorshipApplication:
      type: object
      properties:
        id:
          type: number
          example: 1
        hasAgreedToConditions:
          type: number
          example: true
        agreedToConditionsAt:
          type: string
          format: 'date-time'
          example: '2023-05-04T14:28:30.000Z'
        createdAt:
          type: string
          format: 'date-time'
          example: '2023-05-04T14:28:30.000Z'
        updatedAt:
          type: string
          format: 'date-time'
          example: '2023-05-04T14:28:30.000Z'
    MentorshipEventAttendee:
      type: object
      properties:
        id:
          type: number
          example: 1
        accepted:
          type: boolean
          example: true
        invitedAt:
          type: string
          format: 'date-time'
          example: '2023-05-04T14:28:30.000Z'
        answeredAt:
          type: string
          format: 'date-time'
          example: '2023-05-04T14:28:30.000Z'
    MentorshipGoalTask:
      type: object
      properties:
        id:
          type: number
          example: 1
        name:
          type: string
          example: 'Completar cadastro da organização no sistema x'
        completed:
          type: boolean
          example: false
        completedBy:
          type: number
          description: User id
          example: null
        completedAt:
          type: string
          format: 'date-time'
          example: null
        createdAt:
          type: string
          format: 'date-time'
          example: '2023-05-04T14:28:30.000Z'
        updatedAt:
          type: string
          format: 'date-time'
          example: '2023-05-04T14:28:30.000Z'
    Program:
      type: object
      properties:
        id:
          type: number
          example: 1
        name:
          type: string
          example: 'Itau Social para Educação 2.0'
        description:
          type: string
          example: 'Essa é uma campanha do Itau Social visando ajudar as causas de educação para crianças carentes'
        startDate:
          type: string
          format: date
          example: '2023-04-23'
        endDate:
          type: string
          format: date
          example: '2024-04-23'
    Role:
      type: object
      properties:
        id:
          type: number
          example: 1
        role:
          type: string
          example: 'admin'
    SocialOrganizationSectors:
      type: object
      properties:
        id:
          type: number
          example: 1
        sector:
          type: string
          example: sustainability
        ranking:
          type: number
          example: 3
        currentlyWorking:
          type: string
          example: |-
            Lorem ipsum dolor sit amet, consectetur adipiscing elit.
            Phasellus at neque ornare, fringilla lorem ac, volutpat nulla.
            Maecenas id justo sit amet ipsum convallis condimentum a ultricies elit.
            Nam at ornare nibh. Maecenas a porta nisl.
        effectiveness:
          type: string
          example: |-
            Lorem ipsum dolor sit amet, consectetur adipiscing elit.
            Phasellus at neque ornare, fringilla lorem ac, volutpat nulla.
            Maecenas id justo sit amet ipsum convallis condimentum a ultricies elit.
            Nam at ornare nibh. Maecenas a porta nisl.
        createdAt:
          type: string
          format: 'date-time'
          example: '2023-05-28T19:37:16.000Z'
        updatedAt:
          type: string
          format: 'date-time'
          example: '2023-05-28T19:37:16.000Z'
    Storage:
      type: object
      properties:
        id:
          type: number
          example: 1
        bucketName:
          type: string
          example: 'userBanners'
        directoryPath:
          type: string
          example: 'path/to/file.jpeg'
        mimeType:
          type: string
          example: 'image/jpeg'
    UserAchievements:
      type: array
      description: 'Will have all achievements avalaible in the database. Flags if the user has completed it by the "completed" key'
      items:
        type: object
        properties:
          id:
            type: number
            example: 1
          achievement:
            type: string
            example: 'first_application'
          completed:
            type: boolean
            example: false
    UserSecureData:
      type: object
      properties:
        id:
          type: integer
          example: 1
        email:
          type: string
          format: email
        isVerified:
          type: boolean
        byname:
          type: string
          example: "João"
        fullName:
          type: string
          example: "João da Silva Fernandes"
        gender:
          type: string
          example: 'Masculino'
        birthdate:
          type: string
          format: date
          example: '1982-01-01'
        country:
          type: string
          example: 'Brasil'
        state:
          type: string
          example: 'SP'
        city:
          type: string
          example: 'Carapicuiba'
        professionalExperience:
          type: number
          example: 10.6
        professionalSector:
          type: string
          example: 'Finanças'
        professionalRole:
          type: string
          example: 'Bancário'
        availableTime:
          type: number
          example: 4
        linkedinUrl:
          type: string
          example: 'https://linkedin.com/in/joaodasilvafernandes1323'
        professionalPreviousExperiences:
          type: string
          example: |-
            Lorem ipsum dolor sit amet, consectetur adipiscing elit.
            Aliquam tempor massa diam, et fringilla enim sollicitudin ac.
            Aliquam at lectus facilisis, varius nisl semper, dapibus massa
        mainCompetencies:
          type: string
          example: 'Sou ótimo com números'
        reasonToJoin:
          type: string
          example: 'Sou caridoso'
        previousMentorship:
          type: string
          example: 'Nunca fiz nada assim antes'
        profilePicture:
          $ref: '#/components/schemas/Storage'
        banner:
          $ref: '#/components/schemas/Storage'
    VolunteerDashboard:
      type: object
      properties:
        achievements:
          $ref: '#/components/schemas/UserAchievements'
        programs:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/Program'
              - type: object
                properties:
                  applied:
                    type: boolean
                    example: true
        user:
          $ref: '#/components/schemas/UserSecureData'
    VolunteerApplication:
      type: object
      properties:
        id:
          type: number
          example: 1
        program:
          type: number
          example: 1
        user:
          type: number
          example: 1
        firstRole:
          type: number
          example: 1
        secondRole:
          type: number
          example: 2
        thirdRole:
          type: number
          example: 3
        hasAgreedToConditions:
          type: boolean
          example: true
        agreedToConditionsAt:
          type: string
          format: 'date-time'
          example: '2023-05-04T14:28:30.000Z'
        createdAt:
          type: string
          format: 'date-time'
          example: '2023-05-04T14:28:30.000Z'
        updatedAt:
          type: string
          format: 'date-time'
          example: '2023-05-04T14:28:30.000Z'
  securitySchemes:
    bearer_token:
      type: http
      scheme: bearer
      bearerFormat: JWT